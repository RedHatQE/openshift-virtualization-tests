import copy

# We have to explicitly track the expected default values
# here because we cannot simply trust that the cluster
# where we are going to execute the test is always going to
# come with a vanilla configuration.
# For instance the default for spec.certConfig.server.duration
# is 48h but this is definitively too long for a test environment
# so we expect that the initial configuration will differ from the
# default one.
from tests.install_upgrade_operators.constants import (
    HCO_CR_CERT_CONFIG_CA_KEY,
    HCO_CR_CERT_CONFIG_DURATION_KEY,
    HCO_CR_CERT_CONFIG_KEY,
    HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY,
    HCO_CR_CERT_CONFIG_SERVER_KEY,
)

DEPLOY_KUBE_SECONDARY_DNS = "deployKubeSecondaryDNS"
CERTC_DEFAULT_48H = "48h0m0s"
CERTC_DEFAULT_24H = "24h0m0s"
CERTC_DEFAULT_12H = "12h0m0s"
CERTC_CUSTOM_96H = "96h0m0s"
CERTC_CUSTOM_36H = "36h0m0s"
CERTC_CUSTOM_18H = "18h0m0s"

KUBEVIRT_CR_CERT_CONFIG_SELF_SIGNED_KEY = "selfSigned"
CDI_CR_CERT_CONFIG_KEY = HCO_CR_CERT_CONFIG_KEY
CNAO_CR_CERT_CONFIG_KEY = "selfSignConfiguration"
CNAO_CR_CERT_CONFIG_CA_DURATION_KEY = "caRotateInterval"
CNAO_CR_CERT_CONFIG_KEY_CA_RENEW_BEFORE_KEY = "caOverlapInterval"
CNAO_CR_CERT_CONFIG_SERVER_DURATION_KEY = "certRotateInterval"
CNAO_CR_CERT_CONFIG_KEY_SERVER_RENEW_BEFORE_KEY = "certOverlapInterval"

LIVE_MIGRATION_CONFIG_KEY = "liveMigrationConfig"
ALLOW_AUTO_CONVERGE = "allowAutoConverge"
ALLOW_POST_COPY = "allowPostCopy"
LIVE_MIGRATION_CONFIG_BANDWIDTH_PER_MIGRATION_KEY = "bandwidthPerMigration"
COMPLETION_TIMEOUT_PER_GIB_KEY = "completionTimeoutPerGiB"
COMPLETION_TIMEOUT_PER_GIB_VALUE = 777
PROGRESS_TIMEOUT_KEY = "progressTimeout"
PROGRESS_TIMEOUT_VALUE = 1500
PARALLEL_OUTBOUND_MIGRATIONS_PER_NODE_KEY = "parallelOutboundMigrationsPerNode"
PARALLEL_OUTBOUND_MIGRATIONS_PN_VALUE = 4
PARALLEL_MIGRATIONS_PER_CLUSTER_KEY = "parallelMigrationsPerCluster"
PARALLEL_MIGRATIONS_PER_CLUSTER_VALUE = 3
LM_COMPLETIONTIMEOUTPERGIB_DEFAULT = 150
LM_PARALLELMIGRATIONSPERCLUSTER_DEFAULT = 5
LM_PARALLELOUTBOUNDMIGRATIONSPERNODE_DEFAULT = 2
LM_PROGRESSTIMEOUT_DEFAULT = 150
LM_COMPLETIONTIMEOUTPERGIB_CUSTOM = 1200
LM_PARALLELMIGRATIONSPERCLUSTER_CUSTOM = 8
LM_PARALLELOUTBOUNDMIGRATIONSPERNODE_CUSTOM = 3
LM_PROGRESSTIMEOUT_CUSTOM = 225
LM_PO_DEFAULT = {
    PARALLEL_OUTBOUND_MIGRATIONS_PER_NODE_KEY: LM_PARALLELOUTBOUNDMIGRATIONSPERNODE_DEFAULT,
}

EXPCT_CERTC_DEFAULTS = {
    HCO_CR_CERT_CONFIG_CA_KEY: {
        HCO_CR_CERT_CONFIG_DURATION_KEY: CERTC_DEFAULT_48H,
        HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY: CERTC_DEFAULT_24H,
    },
    HCO_CR_CERT_CONFIG_SERVER_KEY: {
        HCO_CR_CERT_CONFIG_DURATION_KEY: CERTC_DEFAULT_24H,
        HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY: CERTC_DEFAULT_12H,
    },
}
EXPCT_CERTC_CUSTOM_CA_DUR = copy.deepcopy(EXPCT_CERTC_DEFAULTS)
EXPCT_CERTC_CUSTOM_CA_RB = copy.deepcopy(EXPCT_CERTC_DEFAULTS)
EXPCT_CERTC_CUSTOM_SERVER_DUR = copy.deepcopy(EXPCT_CERTC_DEFAULTS)
EXPCT_CERTC_CUSTOM_SERVER_RB = copy.deepcopy(EXPCT_CERTC_DEFAULTS)
EXPCT_CERTC_CUSTOM_CA_DUR[HCO_CR_CERT_CONFIG_CA_KEY][HCO_CR_CERT_CONFIG_DURATION_KEY] = CERTC_CUSTOM_96H
EXPCT_CERTC_CUSTOM_CA_RB[HCO_CR_CERT_CONFIG_CA_KEY][HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY] = CERTC_CUSTOM_36H
EXPCT_CERTC_CUSTOM_SERVER_DUR[HCO_CR_CERT_CONFIG_SERVER_KEY][HCO_CR_CERT_CONFIG_DURATION_KEY] = CERTC_CUSTOM_36H
EXPCT_CERTC_CUSTOM_SERVER_RB[HCO_CR_CERT_CONFIG_SERVER_KEY][HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY] = CERTC_CUSTOM_18H

EXPCT_LM_DEFAULTS = {
    ALLOW_POST_COPY: False,
    ALLOW_AUTO_CONVERGE: False,
    PARALLEL_MIGRATIONS_PER_CLUSTER_KEY: LM_PARALLELMIGRATIONSPERCLUSTER_DEFAULT,
    PARALLEL_OUTBOUND_MIGRATIONS_PER_NODE_KEY: LM_PARALLELOUTBOUNDMIGRATIONSPERNODE_DEFAULT,
    COMPLETION_TIMEOUT_PER_GIB_KEY: LM_COMPLETIONTIMEOUTPERGIB_DEFAULT,
    PROGRESS_TIMEOUT_KEY: LM_PROGRESSTIMEOUT_DEFAULT,
}
EXPCT_LM_CUSTOM = {
    ALLOW_POST_COPY: False,
    ALLOW_AUTO_CONVERGE: False,
    PARALLEL_MIGRATIONS_PER_CLUSTER_KEY: LM_PARALLELMIGRATIONSPERCLUSTER_CUSTOM,
    PARALLEL_OUTBOUND_MIGRATIONS_PER_NODE_KEY: LM_PARALLELOUTBOUNDMIGRATIONSPERNODE_CUSTOM,
    COMPLETION_TIMEOUT_PER_GIB_KEY: LM_COMPLETIONTIMEOUTPERGIB_CUSTOM,
    PROGRESS_TIMEOUT_KEY: LM_PROGRESSTIMEOUT_CUSTOM,
}
LM_CUST_DEFAULT_PM = copy.deepcopy(EXPCT_LM_CUSTOM)
LM_CUST_DEFAULT_PO = copy.deepcopy(EXPCT_LM_CUSTOM)
LM_CUST_DEFAULT_C = copy.deepcopy(EXPCT_LM_CUSTOM)
LM_CUST_DEFAULT_PT = copy.deepcopy(EXPCT_LM_CUSTOM)
LM_CUST_DEFAULT_PM[PARALLEL_MIGRATIONS_PER_CLUSTER_KEY] = LM_PARALLELMIGRATIONSPERCLUSTER_DEFAULT
LM_CUST_DEFAULT_PO[PARALLEL_OUTBOUND_MIGRATIONS_PER_NODE_KEY] = LM_PARALLELOUTBOUNDMIGRATIONSPERNODE_DEFAULT
LM_CUST_DEFAULT_C[COMPLETION_TIMEOUT_PER_GIB_KEY] = LM_COMPLETIONTIMEOUTPERGIB_DEFAULT
LM_CUST_DEFAULT_PT[PROGRESS_TIMEOUT_KEY] = LM_PROGRESSTIMEOUT_DEFAULT
EXPCT_LM_CUSTOM_PM = copy.deepcopy(EXPCT_LM_DEFAULTS)
EXPCT_LM_CUSTOM_PO = copy.deepcopy(EXPCT_LM_DEFAULTS)
EXPCT_LM_CUSTOM_C = copy.deepcopy(EXPCT_LM_DEFAULTS)
EXPCT_LM_CUSTOM_PT = copy.deepcopy(EXPCT_LM_DEFAULTS)

EXPCT_LM_CUSTOM_PM[PARALLEL_MIGRATIONS_PER_CLUSTER_KEY] = LM_PARALLELMIGRATIONSPERCLUSTER_CUSTOM
EXPCT_LM_CUSTOM_PO[PARALLEL_OUTBOUND_MIGRATIONS_PER_NODE_KEY] = LM_PARALLELOUTBOUNDMIGRATIONSPERNODE_CUSTOM
EXPCT_LM_CUSTOM_C[COMPLETION_TIMEOUT_PER_GIB_KEY] = LM_COMPLETIONTIMEOUTPERGIB_CUSTOM
EXPCT_LM_CUSTOM_PT[PROGRESS_TIMEOUT_KEY] = LM_PROGRESSTIMEOUT_CUSTOM
EXPCT_CERTC_CUSTOM = {
    HCO_CR_CERT_CONFIG_CA_KEY: {
        HCO_CR_CERT_CONFIG_DURATION_KEY: CERTC_CUSTOM_96H,
        HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY: CERTC_CUSTOM_36H,
    },
    HCO_CR_CERT_CONFIG_SERVER_KEY: {
        HCO_CR_CERT_CONFIG_DURATION_KEY: CERTC_CUSTOM_36H,
        HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY: CERTC_CUSTOM_18H,
    },
}

CUSTOM_HCO_CR_SPEC = {
    "spec": {
        LIVE_MIGRATION_CONFIG_KEY: EXPCT_LM_CUSTOM,
        HCO_CR_CERT_CONFIG_KEY: EXPCT_CERTC_CUSTOM,
    }
}
KUBEVIRT_DEFAULT = {KUBEVIRT_CR_CERT_CONFIG_SELF_SIGNED_KEY: EXPCT_CERTC_DEFAULTS}
KUBEVIRT_CUSTOM = {
    KUBEVIRT_CR_CERT_CONFIG_SELF_SIGNED_KEY: EXPCT_CERTC_CUSTOM,
}
KV_MOD_DEFAULT_CA_DUR = copy.deepcopy(KUBEVIRT_CUSTOM)
KV_MOD_DEFAULT_CA_RB = copy.deepcopy(KUBEVIRT_CUSTOM)
KV_MOD_DEFAULT_SER_DUR = copy.deepcopy(KUBEVIRT_CUSTOM)
KV_MOD_DEFAULT_SER_RB = copy.deepcopy(KUBEVIRT_CUSTOM)
KV_MOD_DEFAULT_CA_DUR[KUBEVIRT_CR_CERT_CONFIG_SELF_SIGNED_KEY][HCO_CR_CERT_CONFIG_CA_KEY][
    HCO_CR_CERT_CONFIG_DURATION_KEY
] = CERTC_DEFAULT_48H
KV_MOD_DEFAULT_CA_RB[KUBEVIRT_CR_CERT_CONFIG_SELF_SIGNED_KEY][HCO_CR_CERT_CONFIG_CA_KEY][
    HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY
] = CERTC_DEFAULT_24H
KV_MOD_DEFAULT_SER_DUR[KUBEVIRT_CR_CERT_CONFIG_SELF_SIGNED_KEY][HCO_CR_CERT_CONFIG_SERVER_KEY][
    HCO_CR_CERT_CONFIG_DURATION_KEY
] = CERTC_DEFAULT_24H
KV_MOD_DEFAULT_SER_RB[KUBEVIRT_CR_CERT_CONFIG_SELF_SIGNED_KEY][HCO_CR_CERT_CONFIG_SERVER_KEY][
    HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY
] = CERTC_DEFAULT_12H
CNAO_CERT_CONFIG_DEFAULT = {
    CNAO_CR_CERT_CONFIG_KEY_CA_RENEW_BEFORE_KEY: CERTC_DEFAULT_24H,
    CNAO_CR_CERT_CONFIG_CA_DURATION_KEY: CERTC_DEFAULT_48H,
    CNAO_CR_CERT_CONFIG_KEY_SERVER_RENEW_BEFORE_KEY: CERTC_DEFAULT_12H,
    CNAO_CR_CERT_CONFIG_SERVER_DURATION_KEY: CERTC_DEFAULT_24H,
}
CNAO_CERT_CONFIG_CUSTOM = {
    CNAO_CR_CERT_CONFIG_KEY_CA_RENEW_BEFORE_KEY: CERTC_CUSTOM_36H,
    CNAO_CR_CERT_CONFIG_CA_DURATION_KEY: CERTC_CUSTOM_96H,
    CNAO_CR_CERT_CONFIG_KEY_SERVER_RENEW_BEFORE_KEY: CERTC_CUSTOM_18H,
    CNAO_CR_CERT_CONFIG_SERVER_DURATION_KEY: CERTC_CUSTOM_36H,
}
CNAO_MOD_DEFAULT_CA_DUR = copy.deepcopy(CNAO_CERT_CONFIG_CUSTOM)
CNAO_MOD_DEFAULT_CA_RB = copy.deepcopy(CNAO_CERT_CONFIG_CUSTOM)
CNAO_MOD_DEFAULT_SER_DUR = copy.deepcopy(CNAO_CERT_CONFIG_CUSTOM)
CNAO_MOD_DEFAULT_SER_RB = copy.deepcopy(CNAO_CERT_CONFIG_CUSTOM)
CNAO_MOD_DEFAULT_CA_DUR_EXPECTED = copy.deepcopy(CNAO_CERT_CONFIG_CUSTOM)
CNAO_MOD_DEFAULT_CA_DUR_EXPECTED[CNAO_CR_CERT_CONFIG_CA_DURATION_KEY] = CERTC_DEFAULT_48H
CNAO_MOD_DEFAULT_CA_RB_EXPECTED = copy.deepcopy(CNAO_CERT_CONFIG_CUSTOM)
CNAO_MOD_DEFAULT_CA_RB_EXPECTED[CNAO_CR_CERT_CONFIG_KEY_CA_RENEW_BEFORE_KEY] = CERTC_DEFAULT_24H
CNAO_MOD_DEFAULT_SER_DUR_EXPECTED = copy.deepcopy(CNAO_CERT_CONFIG_CUSTOM)
CNAO_MOD_DEFAULT_SER_DUR_EXPECTED[CNAO_CR_CERT_CONFIG_SERVER_DURATION_KEY] = CERTC_DEFAULT_24H
CNAO_MOD_DEFAULT_SER_RB_EXPECTED = copy.deepcopy(CNAO_CERT_CONFIG_CUSTOM)
CNAO_MOD_DEFAULT_SER_RB_EXPECTED[CNAO_CR_CERT_CONFIG_KEY_SERVER_RENEW_BEFORE_KEY] = CERTC_DEFAULT_12H
CNAO_MOD_DEFAULT_CA_RB[CNAO_CR_CERT_CONFIG_KEY_CA_RENEW_BEFORE_KEY] = CERTC_DEFAULT_48H
CNAO_MOD_DEFAULT_CA_DUR[CNAO_CR_CERT_CONFIG_CA_DURATION_KEY] = CERTC_DEFAULT_24H
CNAO_MOD_DEFAULT_SER_RB[CNAO_CR_CERT_CONFIG_KEY_SERVER_RENEW_BEFORE_KEY] = CERTC_DEFAULT_24H
CNAO_MOD_DEFAULT_SER_DUR[CNAO_CR_CERT_CONFIG_SERVER_DURATION_KEY] = CERTC_DEFAULT_12H

HCO_MOD_DEFAULT_CA_DUR = copy.deepcopy(EXPCT_CERTC_CUSTOM)
HCO_MOD_DEFAULT_CA_RB = copy.deepcopy(EXPCT_CERTC_CUSTOM)
HCO_MOD_DEFAULT_SER_DUR = copy.deepcopy(EXPCT_CERTC_CUSTOM)
HCO_MOD_DEFAULT_SER_RB = copy.deepcopy(EXPCT_CERTC_CUSTOM)
HCO_MOD_DEFAULT_CA_DUR[HCO_CR_CERT_CONFIG_CA_KEY][HCO_CR_CERT_CONFIG_DURATION_KEY] = CERTC_DEFAULT_48H
HCO_MOD_DEFAULT_CA_RB[HCO_CR_CERT_CONFIG_CA_KEY][HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY] = CERTC_DEFAULT_24H
HCO_MOD_DEFAULT_SER_DUR[HCO_CR_CERT_CONFIG_SERVER_KEY][HCO_CR_CERT_CONFIG_DURATION_KEY] = CERTC_DEFAULT_24H
HCO_MOD_DEFAULT_SER_RB[HCO_CR_CERT_CONFIG_SERVER_KEY][HCO_CR_CERT_CONFIG_RENEW_BEFORE_KEY] = CERTC_DEFAULT_12H

KUBEVIRT_CR_CERT_CONFIG_KEY = "certificateRotateStrategy"
KUBEVIRT_CR_MIGRATIONS_KEY = "migrations"
KUBEVIRT_CR_CONFIGURATION_KEY = "configuration"

# Fields without default values

SCRATCH_SPACE_STORAGE_CLASS_KEY = "scratchSpaceStorageClass"
SCRATCH_SPACE_STORAGE_CLASS_VALUE = "customScratch"
STORAGE_IMPORT_KEY_HCO_CR = "storageImport"
STORAGE_IMPORT_VALUE = {
    "insecureRegistries": [
        "private-registry-example-1:5000",
        "private-registry-example-2:5000",
    ]
}
OBSOLETE_CPUS_KEY = "obsoleteCPUs"
OBSOLETE_CPUS_VALUE_HCO_CR = {
    "cpuModels": [
        "487",
        "pentium5",
        "pentiumhome",
    ],
    "minCPUModel": "Haswell",
}
OBSOLETE_CPUS_VALUE_KUBEVIRT_CR = {
    "obsoleteCPUModels": {
        "487": True,
        "pentium5": True,
        "pentiumhome": True,
    },
    "minCPUModel": "Haswell",
}
RESOURCE_REQUIREMENTS = {
    "storageWorkloads": {
        "limits": {
            "cpu": "888k",
            "memory": "123Mi",
        },
        "requests": {
            "cpu": "555m",
            "memory": "1Gi",
        },
    }
}

NP_INFRA_KEY = "infra"
NP_INFRA_VALUE_CDI_CR = {
    "affinity": {
        "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
                "nodeSelectorTerms": [
                    {
                        "matchExpressions": [
                            {
                                "key": "nodeType",
                                "operator": "In",
                                "values": [
                                    "infra",
                                ],
                            },
                        ]
                    }
                ]
            }
        }
    },
    "nodeSelector": {"test_case": "np"},
}
NP_INFRA_VALUE_HCO_CR = {
    "nodePlacement": NP_INFRA_VALUE_CDI_CR,
}
NP_WORKLOADS_KEY_HCO_CR = "workloads"
NP_WORKLOADS_KEY_CDI_CR = "workload"
NP_WORKLOADS_VALUE_HCO_CR = {
    "nodePlacement": {
        "affinity": {
            "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                        {
                            "matchExpressions": [
                                {
                                    "key": "kubernetes.io/e2e-az-name",
                                    "operator": "In",
                                    "values": [
                                        "e2e-az1",
                                        "e2e-az2",
                                    ],
                                },
                            ]
                        }
                    ]
                },
                "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                        "weight": 1,
                        "preference": {
                            "matchExpressions": [
                                {
                                    "key": "my-cloud.io/num-cpus",
                                    "operator": "Gt",
                                    "values": ["8"],
                                }
                            ]
                        },
                    }
                ],
            }
        },
        "nodeSelector": {"test_case": "np"},
        "tolerations": [
            {
                "key": "npkey2",
                "operator": "Exists",
                "effect": "NoSchedule",
            }
        ],
    },
}
NP_WORKLOADS_VALUE_CDI_CR = NP_WORKLOADS_VALUE_HCO_CR["nodePlacement"]

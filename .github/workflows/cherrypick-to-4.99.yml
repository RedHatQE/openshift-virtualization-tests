name: PR Cherry-pick to cnv-4.99

on:
  push:
    branches:
      - main

jobs:
  cherry-pick-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if push is from PR merge
        id: check-pr
        run: |
          set -euo pipefail

          # Get the commit SHA that was just pushed
          COMMIT_SHA="${{ github.sha }}"
          echo "Checking commit: $COMMIT_SHA"

          # Validate SHA format
          if [[ ! "$COMMIT_SHA" =~ ^[a-f0-9]{40}$ ]]; then
            echo "Invalid commit SHA format: $COMMIT_SHA"
            exit 1
          fi

          # Check if this is a merge commit (has 2+ parents)
          PARENT_COUNT=$(git rev-list --parents -n1 "$COMMIT_SHA" | wc -w)
          PARENT_COUNT=$((PARENT_COUNT - 1))

          if [ $PARENT_COUNT -lt 2 ]; then
            echo "Not a merge commit, skipping"
            echo "is_pr=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Get commit message to check for PR merge pattern
          COMMIT_MSG=$(git log -1 --format=%s "$COMMIT_SHA")
          echo "Commit message: $COMMIT_MSG"

          # Check if commit message matches GitHub's merge pattern with restricted characters
          # Patterns: owner/repo/branch must not contain dangerous chars like . or /
          if [[ $COMMIT_MSG =~ ^Merge\ pull\ request\ #([0-9]+)\ from\ ([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)$ ]]; then
            PR_NUMBER="${BASH_REMATCH[1]}"
            PR_OWNER="${BASH_REMATCH[2]}"
            PR_REPO="${BASH_REMATCH[3]}"
            BRANCH_NAME="${BASH_REMATCH[4]}"

            echo "Found PR merge:"
            echo "PR Number: $PR_NUMBER"
            echo "PR Owner: $PR_OWNER"
            echo "PR Repo: $PR_REPO"
            echo "Branch: $BRANCH_NAME"

            # Validate PR owner exists
            if ! curl -sf "https://api.github.com/users/$PR_OWNER" > /dev/null; then
              echo "PR owner does not exist: $PR_OWNER"
              echo "is_pr=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi

            echo "is_pr=true" >> "$GITHUB_OUTPUT"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "pr_owner=$PR_OWNER" >> "$GITHUB_OUTPUT"
            echo "pr_repo=$PR_REPO" >> "$GITHUB_OUTPUT"
            echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
            echo "commit_sha=$COMMIT_SHA" >> "$GITHUB_OUTPUT"
          else
            echo "Commit message doesn't match PR merge pattern"
            echo "is_pr=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Get PR details via GitHub API
        if: steps.check-pr.outputs.is_pr == 'true'
        id: get-pr-details
        run: |
          set -euo pipefail

          PR_NUMBER="${{ steps.check-pr.outputs.pr_number }}"

          # Get PR details from GitHub API with error handling
          if ! PR_DATA=$(curl -sf -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER"); then
            echo "Failed to fetch PR data for PR #$PR_NUMBER"
            exit 1
          fi

          # Extract relevant information with jq
          if ! PR_TITLE=$(echo "$PR_DATA" | jq -r '.title // ""'); then
            echo "Failed to extract PR title"
            exit 1
          fi

          if ! PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.user.login // ""'); then
            echo "Failed to extract PR author"
            exit 1
          fi

          if ! PR_BODY=$(echo "$PR_DATA" | jq -r '.body // ""'); then
            echo "Failed to extract PR body"
            exit 1
          fi

          # Use random delimiters to safely set multiline outputs
          DELIMITER_TITLE=$(openssl rand -hex 16)
          DELIMITER_AUTHOR=$(openssl rand -hex 16)
          DELIMITER_BODY=$(openssl rand -hex 16)

          {
            echo "pr_title<<$DELIMITER_TITLE"
            echo "$PR_TITLE"
            echo "$DELIMITER_TITLE"
          } >> "$GITHUB_OUTPUT"

          {
            echo "pr_author<<$DELIMITER_AUTHOR"
            echo "$PR_AUTHOR"
            echo "$DELIMITER_AUTHOR"
          } >> "$GITHUB_OUTPUT"

          {
            echo "pr_body<<$DELIMITER_BODY"
            echo "$PR_BODY"
            echo "$DELIMITER_BODY"
          } >> "$GITHUB_OUTPUT"

      - name: Setup Git configuration
        if: steps.check-pr.outputs.is_pr == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare cherry-pick to cnv-4.99
        if: steps.check-pr.outputs.is_pr == 'true'
        id: cherry-pick
        run: |
          set -euo pipefail

          TARGET_BRANCH="cnv-4.99"
          COMMIT_SHA="${{ steps.check-pr.outputs.commit_sha }}"
          PR_NUMBER="${{ steps.check-pr.outputs.pr_number }}"

          echo "Preparing to cherry-pick $COMMIT_SHA to $TARGET_BRANCH"

          # Fetch and checkout target branch
          if ! git fetch origin "$TARGET_BRANCH"; then
            echo "Failed to fetch target branch: $TARGET_BRANCH"
            exit 1
          fi

          if ! git checkout "origin/$TARGET_BRANCH"; then
            echo "Failed to checkout target branch: $TARGET_BRANCH"
            exit 1
          fi

          # Check if commit already exists on target branch
          if git merge-base --is-ancestor "$COMMIT_SHA" HEAD; then
            echo "Commit $COMMIT_SHA already exists on $TARGET_BRANCH - skipping"
            echo "skip_cherry_pick=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "skip_cherry_pick=false" >> "$GITHUB_OUTPUT"

          # Attempt cherry-pick to working directory (let peter-evans handle the rest)
          echo "Attempting to cherry-pick $COMMIT_SHA"
          if git cherry-pick -m 1 "$COMMIT_SHA"; then
            echo "Cherry-pick successful - changes ready for PR creation"
            echo "has_conflicts=false" >> "$GITHUB_OUTPUT"
          else
            echo "Cherry-pick failed with conflicts - committing conflicted state"

            # Get list of conflicted files
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U | tr '\n' ' ' || echo "Unable to determine conflicted files")
            echo "Conflicted files: $CONFLICTED_FILES"

            # Use random delimiter for conflicted files output
            DELIMITER_CONFLICTS=$(openssl rand -hex 16)
            {
              echo "conflicted_files<<$DELIMITER_CONFLICTS"
              echo "$CONFLICTED_FILES"
              echo "$DELIMITER_CONFLICTS"
            } >> "$GITHUB_OUTPUT"

            echo "has_conflicts=true" >> "$GITHUB_OUTPUT"

            # Commit the conflicted state (peter-evans will create PR from this)
            git add .
            git commit -m "Cherry-pick PR #$PR_NUMBER with conflicts" \
                       -m "Original commit: $COMMIT_SHA" \
                       -m "This commit contains unresolved conflicts that need manual resolution." \
                       -m "Conflicted files: $CONFLICTED_FILES"
          fi

      - name: Create PR for successful cherry-pick
        if: steps.check-pr.outputs.is_pr == 'true' && steps.cherry-pick.outputs.skip_cherry_pick == 'false' && steps.cherry-pick.outputs.has_conflicts == 'false'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "cherry-pick-pr-${{ steps.check-pr.outputs.pr_number }}-${{ github.run_id }}"
          title: "Cherry-pick: ${{ steps.get-pr-details.outputs.pr_title }} (PR #${{ steps.check-pr.outputs.pr_number }})"
          body: |
            ## üçí Automated Cherry-pick from PR

            This PR contains the cherry-pick of **PR #${{ steps.check-pr.outputs.pr_number }}** from `${{ steps.check-pr.outputs.pr_owner }}/${{ steps.check-pr.outputs.pr_repo }}`.

            **Original PR:** ${{ steps.get-pr-details.outputs.pr_title }}
            **Author:** @${{ steps.get-pr-details.outputs.pr_author }}
            **Merge Commit:** ${{ steps.check-pr.outputs.commit_sha }}

            The cherry-pick was applied cleanly to `cnv-4.99` without conflicts.

            **Original PR Link:** ${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.check-pr.outputs.pr_number }}
            **Original Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.check-pr.outputs.commit_sha }}

            ### Original PR Description
            ${{ steps.get-pr-details.outputs.pr_body }}
          base: "cnv-4.99"
          delete-branch: true

      - name: Create draft PR for conflicted cherry-pick
        if: steps.check-pr.outputs.is_pr == 'true' && steps.cherry-pick.outputs.skip_cherry_pick == 'false' && steps.cherry-pick.outputs.has_conflicts == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "cherry-pick-pr-${{ steps.check-pr.outputs.pr_number }}-${{ github.run_id }}-conflicts"
          title: "üö® Cherry-pick Conflicts: ${{ steps.get-pr-details.outputs.pr_title }} (PR #${{ steps.check-pr.outputs.pr_number }})"
          body: |
            ## ‚ö†Ô∏è Cherry-pick Conflicts - Manual Resolution Required

            The automatic cherry-pick of **PR #${{ steps.check-pr.outputs.pr_number }}** from `${{ steps.check-pr.outputs.pr_owner }}/${{ steps.check-pr.outputs.pr_repo }}` resulted in conflicts.

            **Original PR:** ${{ steps.get-pr-details.outputs.pr_title }}
            **Author:** @${{ steps.get-pr-details.outputs.pr_author }}
            **Merge Commit:** ${{ steps.check-pr.outputs.commit_sha }}

            ### üîß How to resolve:
            1. Check out this branch locally: `git fetch origin && git checkout cherry-pick-pr-${{ steps.check-pr.outputs.pr_number }}-${{ github.run_id }}-conflicts`
            2. Resolve conflicts in the affected files
            3. Test your changes thoroughly
            4. Commit your resolution: `git add . && git commit`
            5. Push changes: `git push origin cherry-pick-pr-${{ steps.check-pr.outputs.pr_number }}-${{ github.run_id }}-conflicts`
            6. Mark this PR as ready for review

            ### üìÅ Files with conflicts:
            ```
            ${{ steps.cherry-pick.outputs.conflicted_files }}
            ```

            **Original PR Link:** ${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.check-pr.outputs.pr_number }}
            **Original Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.check-pr.outputs.commit_sha }}

            ### Original PR Description
            ${{ steps.get-pr-details.outputs.pr_body }}
          base: "cnv-4.99"
          delete-branch: true
          draft: true
          labels: cherry-pick-conflicts

name: Cherry-pick to cnv-4.99 on Main Merge

on:
  push:
    branches:
      - main

jobs:
  cherry-pick-to-4-99:
    permissions:
      contents: write
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          # Fetch all history for cherry-picking
          fetch-depth: 0

      - name: Configure Git
        # Configure Git user for commits made directly in the workflow
        # The create-pull-request action handles its own commit authorship.
        run: |
          git config user.name "${{ secrets.GH_BOT_USERNAME }}"
          git config user.email "${{ secrets.GH_BOT_EMAIL }}"

      - name: Get latest merge commit from main
        id: get_merge_commit
        run: |
          LATEST_COMMIT_SHA=$(git rev-parse HEAD)
          echo "Latest commit on main: $LATEST_COMMIT_SHA"

          PARENT_COUNT=$(git rev-list --parents -n 1 "$LATEST_COMMIT_SHA" | wc -w)
          if [ "$PARENT_COUNT" -lt 2 ]; then
            echo "The latest commit is not a merge commit. Skipping cherry-pick."
            echo "::set-output name=is_merge_commit::false"
            exit 0
          fi

          COMMIT_TO_CHERRY_PICK=$(git rev-parse "${LATEST_COMMIT_SHA}^2")
          echo "Commit to cherry-pick: $COMMIT_TO_CHERRY_PICK"
          echo "::set-output name=commit_sha::$COMMIT_TO_CHERRY_PICK"
          echo "::set-output name=is_merge_commit::true"
          echo "::set-output name=commit_message::$(git log -1 --format=%s "$COMMIT_TO_CHERRY_PICK")"
          echo "::set-output name=commit_body::$(git log -1 --format=%b "$COMMIT_TO_CHERRY_PICK")" # Get full commit message body

      - name: Attempt Cherry-pick and Prepare Branch
        id: prepare_branch
        if: steps.get_merge_commit.outputs.is_merge_commit == 'true'
        run: |
          TARGET_BRANCH="cnv-4.99"
          COMMIT_SHA="${{ steps.get_merge_commit.outputs.commit_sha }}"
          COMMIT_MESSAGE_SHORT="${{ steps.get_merge_commit.outputs.commit_message }}"
          TEMP_BRANCH_NAME="cherry-pick-auto/${{ github.event.after }}-${{ github.run_id }}"

          echo "Attempting to cherry-pick $COMMIT_SHA to $TARGET_BRANCH on temporary branch $TEMP_BRANCH_NAME"

          # Fetch the target branch to ensure it's up-to-date locally
          git fetch origin $TARGET_BRANCH:$TARGET_BRANCH

          # Create and switch to the new temporary branch
          git checkout -b "$TEMP_BRANCH_NAME" "origin/$TARGET_BRANCH"

          # Attempt to cherry-pick the commit.
          # --no-commit: apply changes but don't commit yet.
          # --keep-redundant-commits: don't skip if commit already exists (useful for re-runs).
          if git cherry-pick --no-commit --keep-redundant-commits "$COMMIT_SHA"; then
            echo "Cherry-pick applied successfully to temporary branch."
            git commit -m "Cherry-pick: $COMMIT_MESSAGE_SHORT (from $COMMIT_SHA)"
            echo "::set-output name=status::success"
          else
            echo "Cherry-pick resulted in conflicts. Committing conflicted state to temporary branch."
            # Add all changes, including conflict markers, to the staging area
            git add .
            # Commit the conflicted state. This allows the PR to show the conflicts.
            git commit -m "Cherry-pick Conflicts: $COMMIT_MESSAGE_SHORT (from $COMMIT_SHA)"
            echo "::set-output name=status::conflicted"
          fi

          # Push the temporary branch to the remote
          git push origin "$TEMP_BRANCH_NAME"

          echo "::set-output name=temp_branch_name::$TEMP_BRANCH_NAME"

      - name: Create Pull Request for Successful Cherry-pick
        if: steps.prepare_branch.outputs.status == 'success'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Cherry-pick: ${{ steps.get_merge_commit.outputs.commit_message }} (from ${{ steps.get_merge_commit.outputs.commit_sha }})"
          title: "Auto Cherry-pick: ${{ steps.get_merge_commit.outputs.commit_message }}"
          body: |
            ## Automated Cherry-pick

            This Pull Request contains the automatically cherry-picked commit:
            `${{ steps.get_merge_commit.outputs.commit_sha }}`
            "${{ steps.get_merge_commit.outputs.commit_message }}"

            The cherry-pick was applied cleanly to `cnv-4.99`. Please review and merge.

            **Original Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.get_merge_commit.outputs.commit_sha }}
            ---
            ${{ steps.get_merge_commit.outputs.commit_body }}
          branch: ${{ steps.prepare_branch.outputs.temp_branch_name }}
          base: "cnv-4.99"
          delete-branch: true

      - name: Create Pull Request for Conflicted Cherry-pick
        if: steps.prepare_branch.outputs.status == 'conflicted'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Cherry-pick Conflicts: ${{ steps.get_merge_commit.outputs.commit_message }} (from ${{ steps.get_merge_commit.outputs.commit_sha }})"
          title: "Cherry-pick Conflicts: ${{ steps.get_merge_commit.outputs.commit_message }}"
          body: |
            ## Cherry-pick Failed - Manual Intervention Required

            The automatic cherry-pick of commit `${{ steps.get_merge_commit.outputs.commit_sha }}`
            ("${{ steps.get_merge_commit.outputs.commit_message }}") from `main` to `cnv-4.99` has resulted in conflicts.

            This Pull Request has been created with the conflicted state. Please resolve the conflicts
            and merge this PR into `cnv-4.99`.

            **Original Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.get_merge_commit.outputs.commit_sha }}
            ---
            ${{ steps.get_merge_commit.outputs.commit_body }}
          branch: ${{ steps.prepare_branch.outputs.temp_branch_name }}
          base: "cnv-4.99"
          delete-branch: true

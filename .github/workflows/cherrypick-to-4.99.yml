name: Cherry-pick to cnv-4.99 on Main Merge

on:
  push:
    branches:
      - main

jobs:
  cherry-pick-to-4-99:
    permissions:
      actions: write
      contents: write
      pull-requests: write # Required for creating PRs

    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          # Fetch all history for cherry-picking
          fetch-depth: 0

      - name: Configure Git
        # Configure Git user for commits made directly in the workflow
        # The create-pull-request action handles its own commit authorship.
        run: |
          git config user.name "${{ secrets.GH_BOT_USERNAME }}"
          git config user.email "${{ secrets.GH_BOT_EMAIL }}"

      - name: Get latest commit from main # Renamed step for clarity
        id: get_latest_commit # Updated ID
        run: |
          LATEST_COMMIT_SHA=$(git rev-parse HEAD)
          echo "Latest commit on main: $LATEST_COMMIT_SHA"

          # Removed the merge commit check. The workflow will now always attempt
          # to cherry-pick the latest commit on 'main'.
          # If the latest commit is a merge, keep its 1st parent as mainline
          if [ "$(git rev-list --parents -n1 "$LATEST_COMMIT_SHA" | wc -w)" -gt 2 ]; then
            COMMIT_TO_CHERRY_PICK="$LATEST_COMMIT_SHA"
            echo "note: $LATEST_COMMIT_SHA is a merge commit â€“ will cherry-pick with -m 1"
            echo "mainline_parent=1" >> "$GITHUB_OUTPUT"
          else
            COMMIT_TO_CHERRY_PICK="$LATEST_COMMIT_SHA"
            echo "mainline_parent=" >> "$GITHUB_OUTPUT"
          fi
          echo "Commit to cherry-pick: $COMMIT_TO_CHERRY_PICK"
          echo "commit_sha=$COMMIT_TO_CHERRY_PICK" >> "$GITHUB_OUTPUT"
          echo "commit_message=$(git log -1 --format=%s "$COMMIT_TO_CHERRY_PICK")" >> "$GITHUB_OUTPUT"
          {
            echo 'commit_body<<EOF'
            git log -1 --format=%b "$COMMIT_TO_CHERRY_PICK"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Attempt Cherry-pick and Prepare Branch
        id: prepare_branch
        # Removed the 'if' condition based on merge commit status, as we now always attempt cherry-pick
        run: |
          TARGET_BRANCH="cnv-4.99"
          COMMIT_SHA="${{ steps.get_latest_commit.outputs.commit_sha }}" # Updated reference
          COMMIT_MESSAGE_SHORT="${{ steps.get_latest_commit.outputs.commit_message }}" # Updated reference
          TEMP_BRANCH_NAME="cherry-pick-auto/${{ github.event.after }}-${{ github.run_id }}"

          echo "Attempting to cherry-pick $COMMIT_SHA to $TARGET_BRANCH on temporary branch $TEMP_BRANCH_NAME"

          # Fetch the target branch to ensure it's up-to-date locally
          git fetch origin $TARGET_BRANCH:$TARGET_BRANCH

          # Create and switch to the new temporary branch
          git checkout -b "$TEMP_BRANCH_NAME" "origin/$TARGET_BRANCH"

          # Attempt to cherry-pick the commit.
          # --no-commit: apply changes but don't commit yet.
          # --keep-redundant-commits: don't skip if commit already exists (useful for re-runs).
          MAINLINE_OPT=""
          if [[ -n "${{ steps.get_latest_commit.outputs.mainline_parent }}" ]]; then
            MAINLINE_OPT="-m ${{ steps.get_latest_commit.outputs.mainline_parent }}"
          fi

          if git cherry-pick $MAINLINE_OPT --no-commit --keep-redundant-commits "$COMMIT_SHA"; then
            echo "Cherry-pick applied successfully to temporary branch."
            git commit -m "Cherry-pick: $COMMIT_MESSAGE_SHORT (from $COMMIT_SHA)"
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "Cherry-pick resulted in conflicts. Committing conflicted state to temporary branch."
            # Add all changes, including conflict markers, to the staging area
            git add .
            # Commit the conflicted state. This allows the PR to show the conflicts.
            git commit -m "Cherry-pick Conflicts: $COMMIT_MESSAGE_SHORT (from $COMMIT_SHA)"
            echo "status=conflicted" >> "$GITHUB_OUTPUT"
          fi

          # Push the temporary branch to the remote
          git push origin "$TEMP_BRANCH_NAME"

          echo "temp_branch_name=$TEMP_BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request for Successful Cherry-pick
        if: steps.prepare_branch.outputs.status == 'success'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          commit-message: "Cherry-pick: ${{ steps.get_latest_commit.outputs.commit_message }} (from ${{ steps.get_latest_commit.outputs.commit_sha }})" # Updated reference
          title: "Auto Cherry-pick: ${{ steps.get_latest_commit.outputs.commit_message }}" # Updated reference
          body: |
            ## Automated Cherry-pick

            This Pull Request contains the automatically cherry-picked commit:
            `${{ steps.get_latest_commit.outputs.commit_sha }}` # Updated reference
            "${{ steps.get_latest_commit.outputs.commit_message }}" # Updated reference

            The cherry-pick was applied cleanly to `cnv-4.99`. Please review and merge.

            **Original Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.get_latest_commit.outputs.commit_sha }} # Updated reference
            ---
            ${{ steps.get_latest_commit.outputs.commit_body }} # Updated reference
          branch: ${{ steps.prepare_branch.outputs.temp_branch_name }}
          base: "cnv-4.99"
          delete-branch: true

      - name: Create Pull Request for Conflicted Cherry-pick
        if: steps.prepare_branch.outputs.status == 'conflicted'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          commit-message: "Cherry-pick Conflicts: ${{ steps.get_latest_commit.outputs.commit_message }} (from ${{ steps.get_latest_commit.outputs.commit_sha }})" # Updated reference
          title: "Cherry-pick Conflicts: ${{ steps.get_latest_commit.outputs.commit_message }}" # Updated reference
          body: |
            ## Cherry-pick Failed - Manual Intervention Required

            The automatic cherry-pick of commit `${{ steps.get_latest_commit.outputs.commit_sha }}` # Updated reference
            "${{ steps.get_latest_commit.outputs.commit_message }}" from `main` to `cnv-4.99` has resulted in conflicts. # Updated reference

            This Pull Request has been created with the conflicted state. Please resolve the conflicts
            and merge this PR into `cnv-4.99`.

            **Original Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.get_latest_commit.outputs.commit_sha }} # Updated reference
            ---
            ${{ steps.get_latest_commit.outputs.commit_body }} # Updated reference
          branch: ${{ steps.prepare_branch.outputs.temp_branch_name }}
          base: "cnv-4.99"
          delete-branch: true

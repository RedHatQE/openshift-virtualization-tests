name: Cherry-pick to cnv-4.99 on Main Merge

on:
  push:
    branches:
      - main

jobs:
  cherry-pick-to-4-99:
    permissions:
      actions: write
      contents: write
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          # Fetch all history for cherry-picking
          fetch-depth: 0

      - name: Configure Git
        # Configure Git user for commits made directly in the workflow
        run: |
          git config user.name "${{ secrets.GH_BOT_USERNAME }}"
          git config user.email "${{ secrets.GH_BOT_EMAIL }}"

      - name: Get commits to cherry-pick
        id: get_latest_commit
        run: |
          # Use the commit SHA from the push event to ensure consistency
          LATEST_COMMIT_SHA="${{ github.event.after }}"
          BEFORE_COMMIT_SHA="${{ github.event.before }}"
          echo "Latest commit on main: $LATEST_COMMIT_SHA"
          echo "Previous commit: $BEFORE_COMMIT_SHA"

          # Get all commits that were pushed (could be one commit or multiple from a merged PR)
          COMMITS_TO_CHERRY_PICK=$(git rev-list --reverse "$BEFORE_COMMIT_SHA..$LATEST_COMMIT_SHA")
          echo "Commits to cherry-pick:"
          echo "$COMMITS_TO_CHERRY_PICK"

          # For now, cherry-pick the latest commit only (we can extend this later for multiple commits)
          COMMIT_TO_CHERRY_PICK="$LATEST_COMMIT_SHA"

          # Check if this is a merge commit
          if [ "$(git rev-list --parents -n1 "$COMMIT_TO_CHERRY_PICK" | wc -w)" -gt 2 ]; then
            echo "note: $COMMIT_TO_CHERRY_PICK is a merge commit â€“ will cherry-pick with -m 1"
            echo "mainline_parent=1" >> "$GITHUB_OUTPUT"
          else
            echo "mainline_parent=" >> "$GITHUB_OUTPUT"
          fi
          echo "commit_sha=$COMMIT_TO_CHERRY_PICK" >> "$GITHUB_OUTPUT"

          # Safely set the commit message and body outputs, which may contain special characters.
          # We use the heredoc syntax for GITHUB_OUTPUT, which is the most robust method.
          COMMIT_MESSAGE=$(git log -1 --format=%s "$LATEST_COMMIT_SHA")
          DELIMITER_MSG=$(openssl rand -hex 16)
          {
            echo "commit_message<<$DELIMITER_MSG"
            echo "$COMMIT_MESSAGE"
            echo "$DELIMITER_MSG"
          } >> "$GITHUB_OUTPUT"

          COMMIT_BODY=$(git log -1 --format=%b "$LATEST_COMMIT_SHA")
          DELIMITER_BODY=$(openssl rand -hex 16)
          {
            echo "commit_body<<$DELIMITER_BODY"
            echo "$COMMIT_BODY"
            echo "$DELIMITER_BODY"
          } >> "$GITHUB_OUTPUT"

      - name: Attempt Cherry-pick and Prepare Branch
        id: prepare_branch
        run: |
          # Capture all workflow expansions into shell variables at the top.
          # This improves readability and prevents shell re-interpretation issues.
          TARGET_BRANCH="cnv-4.99"
          COMMIT_SHA="${{ steps.get_latest_commit.outputs.commit_sha }}"
          COMMIT_MESSAGE_SHORT="${{ steps.get_latest_commit.outputs.commit_message }}"
          MAINLINE_PARENT="${{ steps.get_latest_commit.outputs.mainline_parent }}"
          TEMP_BRANCH_NAME="cherry-pick-auto/$COMMIT_SHA-${{ github.run_id }}"
          STATUS="no_change" # Default status

          echo "Attempting to cherry-pick $COMMIT_SHA to $TARGET_BRANCH on temporary branch $TEMP_BRANCH_NAME"

          # Fetch the target branch to ensure it's up-to-date locally
          git fetch origin "$TARGET_BRANCH"

          # Create and switch to the new temporary branch from the target branch
          git checkout -b "$TEMP_BRANCH_NAME" "origin/$TARGET_BRANCH"

          # Prepare cherry-pick options
          MAINLINE_OPT=""
          if [[ -n "$MAINLINE_PARENT" ]]; then
            MAINLINE_OPT="-m $MAINLINE_PARENT"
          fi

          # First check if the commit already exists on the target branch
          if git merge-base --is-ancestor "$COMMIT_SHA" HEAD; then
            echo "Commit $COMMIT_SHA already exists on $TARGET_BRANCH - skipping"
            STATUS="no_change"
          else
            # Attempt to cherry-pick the commit. We use --no-commit to inspect the result.
            if git cherry-pick $MAINLINE_OPT --no-commit "$COMMIT_SHA"; then
              # Cherry-pick command succeeded. Now check if there are actual changes.
              # `git diff --cached --quiet` exits with 1 if there are staged changes, 0 otherwise.
              if ! git diff --cached --quiet; then
                echo "Cherry-pick applied successfully with changes. Committing."
                git commit -m "Cherry-pick: $COMMIT_MESSAGE_SHORT (from $COMMIT_SHA)"
                STATUS="success"
              else
                echo "Cherry-pick was successful but resulted in no changes."
                # Abort the cherry-pick to clean up the repository state (.git/CHERRY_PICK_HEAD).
                git cherry-pick --quit
                STATUS="no_change"
              fi
            else
              # Cherry-pick command failed, indicating a conflict.
              echo "Cherry-pick resulted in conflicts. Committing conflicted state for manual resolution."
              git add .
              git commit -m "Cherry-pick Conflicts: $COMMIT_MESSAGE_SHORT (from $COMMIT_SHA)"
              STATUS="conflicted"
            fi
          fi

          echo "Final status: $STATUS"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"

          # Set the branch name output for all cases where we need to create a PR
          if [[ "$STATUS" == "success" || "$STATUS" == "conflicted" ]]; then
            echo "temp_branch_name=$TEMP_BRANCH_NAME" >> "$GITHUB_OUTPUT"
            echo "Branch prepared for PR creation: $TEMP_BRANCH_NAME"
          else
            echo "No PR will be created as there are no changes."
          fi

      - name: Create Pull Request for Successful Cherry-pick
        if: steps.prepare_branch.outputs.status == 'success'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          push-to-fork: false
          title: "Auto Cherry-pick: ${{ steps.get_latest_commit.outputs.commit_message }}"
          body: |
            ## Automated Cherry-pick

            This Pull Request contains the automatically cherry-picked commit:
            `${{ steps.get_latest_commit.outputs.commit_sha }}`
            "${{ steps.get_latest_commit.outputs.commit_message }}"

            The cherry-pick was applied cleanly to `cnv-4.99`. Please review and merge.

            **Original Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.get_latest_commit.outputs.commit_sha }}
            ---
            ${{ steps.get_latest_commit.outputs.commit_body }}
          branch: ${{ steps.prepare_branch.outputs.temp_branch_name }}
          base: "cnv-4.99"
          delete-branch: true

      - name: Create Pull Request for Conflicted Cherry-pick
        if: steps.prepare_branch.outputs.status == 'conflicted'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          push-to-fork: false
          draft: true
          labels: "needs-manual-cherry-pick"
          title: "Cherry-pick Conflicts: ${{ steps.get_latest_commit.outputs.commit_message }}"
          body: |
            ## Cherry-pick Failed - Manual Intervention Required

            The automatic cherry-pick of commit `${{ steps.get_latest_commit.outputs.commit_sha }}`
            "${{ steps.get_latest_commit.outputs.commit_message }}" from `main` to `cnv-4.99` has resulted in conflicts.

            This Pull Request has been created with the conflicted state. Please resolve the conflicts
            and merge this PR into `cnv-4.99`.

            **Original Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.get_latest_commit.outputs.commit_sha }}
            ---
            ${{ steps.get_latest_commit.outputs.commit_body }}
          branch: ${{ steps.prepare_branch.outputs.temp_branch_name }}
          base: "cnv-4.99"
          delete-branch: true
